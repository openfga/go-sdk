/**
 * Go SDK for OpenFGA
 *
 * API version: 1.x
 * Website: https://openfga.dev
 * Documentation: https://openfga.dev/docs
 * Support: https://openfga.dev/community
 * License: [Apache-2.0](https://github.com/openfga/go-sdk/blob/main/LICENSE)
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */

package openfga

import (
	"bytes"

	"encoding/json"
)

// Nodes struct for Nodes
type Nodes struct {
	Nodes []Node `json:"nodes"yaml:"nodes"`
}

// NewNodes instantiates a new Nodes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodes(nodes []Node) *Nodes {
	this := Nodes{}
	this.Nodes = nodes
	return &this
}

// NewNodesWithDefaults instantiates a new Nodes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodesWithDefaults() *Nodes {
	this := Nodes{}
	return &this
}

// GetNodes returns the Nodes field value
func (o *Nodes) GetNodes() []Node {
	if o == nil {
		var ret []Node
		return ret
	}

	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value
// and a boolean to check if the value has been set.
func (o *Nodes) GetNodesOk() (*[]Node, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nodes, true
}

// SetNodes sets field value
func (o *Nodes) SetNodes(v []Node) {
	o.Nodes = v
}

func (o Nodes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nodes"] = o.Nodes
	var b bytes.Buffer
	enc := json.NewEncoder(&b)
	enc.SetEscapeHTML(false)
	err := enc.Encode(toSerialize)
	if err != nil {
		return nil, err
	}
	return b.Bytes(), nil
}

type NullableNodes struct {
	value *Nodes
	isSet bool
}

func (v NullableNodes) Get() *Nodes {
	return v.value
}

func (v *NullableNodes) Set(val *Nodes) {
	v.value = val
	v.isSet = true
}

func (v NullableNodes) IsSet() bool {
	return v.isSet
}

func (v *NullableNodes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodes(val *Nodes) *NullableNodes {
	return &NullableNodes{value: val, isSet: true}
}

func (v NullableNodes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
