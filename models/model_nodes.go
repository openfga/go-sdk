/**
 * Go SDK for OpenFGA
 *
 * API version: 0.1
 * Website: https://openfga.dev
 * Documentation: https://openfga.dev/docs
 * Support: https://discord.gg/8naAwJfWN6
 * License: [Apache-2.0](https://github.com/openfga/go-sdk/blob/main/LICENSE)
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */

package openfga

import (
	"encoding/json"
)

// Nodes struct for Nodes
type Nodes struct {
	Nodes *[]Node `json:"nodes,omitempty"`
}

// NewNodes instantiates a new Nodes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodes() *Nodes {
	this := Nodes{}
	return &this
}

// NewNodesWithDefaults instantiates a new Nodes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodesWithDefaults() *Nodes {
	this := Nodes{}
	return &this
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *Nodes) GetNodes() []Node {
	if o == nil || o.Nodes == nil {
		var ret []Node
		return ret
	}
	return *o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nodes) GetNodesOk() (*[]Node, bool) {
	if o == nil || o.Nodes == nil {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *Nodes) HasNodes() bool {
	if o != nil && o.Nodes != nil {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []Node and assigns it to the Nodes field.
func (o *Nodes) SetNodes(v []Node) {
	o.Nodes = &v
}

func (o Nodes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Nodes != nil {
		toSerialize["nodes"] = o.Nodes
	}
	return json.Marshal(toSerialize)
}

type NullableNodes struct {
	value *Nodes
	isSet bool
}

func (v NullableNodes) Get() *Nodes {
	return v.value
}

func (v *NullableNodes) Set(val *Nodes) {
	v.value = val
	v.isSet = true
}

func (v NullableNodes) IsSet() bool {
	return v.isSet
}

func (v *NullableNodes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodes(val *Nodes) *NullableNodes {
	return &NullableNodes{value: val, isSet: true}
}

func (v NullableNodes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
