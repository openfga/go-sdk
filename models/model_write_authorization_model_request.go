/**
 * Go SDK for OpenFGA
 *
 * API version: 0.1
 * Website: https://openfga.dev
 * Documentation: https://openfga.dev/docs
 * Support: https://discord.gg/8naAwJfWN6
 * License: [Apache-2.0](https://github.com/openfga/go-sdk/blob/main/LICENSE)
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */

package openfga

import (
	"encoding/json"
)

// WriteAuthorizationModelRequest struct for WriteAuthorizationModelRequest
type WriteAuthorizationModelRequest struct {
	TypeDefinitions []TypeDefinition `json:"type_definitions"`
	SchemaVersion   *string          `json:"schema_version,omitempty"`
}

// NewWriteAuthorizationModelRequest instantiates a new WriteAuthorizationModelRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWriteAuthorizationModelRequest(typeDefinitions []TypeDefinition) *WriteAuthorizationModelRequest {
	this := WriteAuthorizationModelRequest{}
	this.TypeDefinitions = typeDefinitions
	return &this
}

// NewWriteAuthorizationModelRequestWithDefaults instantiates a new WriteAuthorizationModelRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWriteAuthorizationModelRequestWithDefaults() *WriteAuthorizationModelRequest {
	this := WriteAuthorizationModelRequest{}
	return &this
}

// GetTypeDefinitions returns the TypeDefinitions field value
func (o *WriteAuthorizationModelRequest) GetTypeDefinitions() []TypeDefinition {
	if o == nil {
		var ret []TypeDefinition
		return ret
	}

	return o.TypeDefinitions
}

// GetTypeDefinitionsOk returns a tuple with the TypeDefinitions field value
// and a boolean to check if the value has been set.
func (o *WriteAuthorizationModelRequest) GetTypeDefinitionsOk() (*[]TypeDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeDefinitions, true
}

// SetTypeDefinitions sets field value
func (o *WriteAuthorizationModelRequest) SetTypeDefinitions(v []TypeDefinition) {
	o.TypeDefinitions = v
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *WriteAuthorizationModelRequest) GetSchemaVersion() string {
	if o == nil || o.SchemaVersion == nil {
		var ret string
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WriteAuthorizationModelRequest) GetSchemaVersionOk() (*string, bool) {
	if o == nil || o.SchemaVersion == nil {
		return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *WriteAuthorizationModelRequest) HasSchemaVersion() bool {
	if o != nil && o.SchemaVersion != nil {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given string and assigns it to the SchemaVersion field.
func (o *WriteAuthorizationModelRequest) SetSchemaVersion(v string) {
	o.SchemaVersion = &v
}

func (o WriteAuthorizationModelRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type_definitions"] = o.TypeDefinitions
	}
	if o.SchemaVersion != nil {
		toSerialize["schema_version"] = o.SchemaVersion
	}
	return json.Marshal(toSerialize)
}

type NullableWriteAuthorizationModelRequest struct {
	value *WriteAuthorizationModelRequest
	isSet bool
}

func (v NullableWriteAuthorizationModelRequest) Get() *WriteAuthorizationModelRequest {
	return v.value
}

func (v *NullableWriteAuthorizationModelRequest) Set(val *WriteAuthorizationModelRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableWriteAuthorizationModelRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableWriteAuthorizationModelRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWriteAuthorizationModelRequest(val *WriteAuthorizationModelRequest) *NullableWriteAuthorizationModelRequest {
	return &NullableWriteAuthorizationModelRequest{value: val, isSet: true}
}

func (v NullableWriteAuthorizationModelRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWriteAuthorizationModelRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
