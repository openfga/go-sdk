/**
 * Go SDK for OpenFGA
 *
 * API version: 0.1
 * Website: https://openfga.dev
 * Documentation: https://openfga.dev/docs
 * Support: https://discord.gg/8naAwJfWN6
 * License: [Apache-2.0](https://github.com/openfga/go-sdk/blob/main/LICENSE)
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */

package openfga

import (
	"encoding/json"
	"time"
)

// TupleChange struct for TupleChange
type TupleChange struct {
	TupleKey  *TupleKey       `json:"tuple_key,omitempty"`
	Operation *TupleOperation `json:"operation,omitempty"`
	Timestamp *time.Time      `json:"timestamp,omitempty"`
}

// NewTupleChange instantiates a new TupleChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTupleChange() *TupleChange {
	this := TupleChange{}
	var operation TupleOperation = WRITE
	this.Operation = &operation
	return &this
}

// NewTupleChangeWithDefaults instantiates a new TupleChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTupleChangeWithDefaults() *TupleChange {
	this := TupleChange{}
	var operation TupleOperation = WRITE
	this.Operation = &operation
	return &this
}

// GetTupleKey returns the TupleKey field value if set, zero value otherwise.
func (o *TupleChange) GetTupleKey() TupleKey {
	if o == nil || o.TupleKey == nil {
		var ret TupleKey
		return ret
	}
	return *o.TupleKey
}

// GetTupleKeyOk returns a tuple with the TupleKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TupleChange) GetTupleKeyOk() (*TupleKey, bool) {
	if o == nil || o.TupleKey == nil {
		return nil, false
	}
	return o.TupleKey, true
}

// HasTupleKey returns a boolean if a field has been set.
func (o *TupleChange) HasTupleKey() bool {
	if o != nil && o.TupleKey != nil {
		return true
	}

	return false
}

// SetTupleKey gets a reference to the given TupleKey and assigns it to the TupleKey field.
func (o *TupleChange) SetTupleKey(v TupleKey) {
	o.TupleKey = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *TupleChange) GetOperation() TupleOperation {
	if o == nil || o.Operation == nil {
		var ret TupleOperation
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TupleChange) GetOperationOk() (*TupleOperation, bool) {
	if o == nil || o.Operation == nil {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *TupleChange) HasOperation() bool {
	if o != nil && o.Operation != nil {
		return true
	}

	return false
}

// SetOperation gets a reference to the given TupleOperation and assigns it to the Operation field.
func (o *TupleChange) SetOperation(v TupleOperation) {
	o.Operation = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *TupleChange) GetTimestamp() time.Time {
	if o == nil || o.Timestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TupleChange) GetTimestampOk() (*time.Time, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *TupleChange) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *TupleChange) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o TupleChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TupleKey != nil {
		toSerialize["tuple_key"] = o.TupleKey
	}
	if o.Operation != nil {
		toSerialize["operation"] = o.Operation
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableTupleChange struct {
	value *TupleChange
	isSet bool
}

func (v NullableTupleChange) Get() *TupleChange {
	return v.value
}

func (v *NullableTupleChange) Set(val *TupleChange) {
	v.value = val
	v.isSet = true
}

func (v NullableTupleChange) IsSet() bool {
	return v.isSet
}

func (v *NullableTupleChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTupleChange(val *TupleChange) *NullableTupleChange {
	return &NullableTupleChange{value: val, isSet: true}
}

func (v NullableTupleChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTupleChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
