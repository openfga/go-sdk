/**
 * Go SDK for OpenFGA
 *
 * API version: 0.1
 * Website: https://openfga.dev
 * Documentation: https://openfga.dev/docs
 * Support: https://discord.gg/8naAwJfWN6
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */

package openfga

import (
	"encoding/json"
	"fmt"
)

// AuthErrorCode - no_auth_error: no error  - auth_failure: generic authentication error. Details available via message field.  - auth_failed_invalid_subject: authentication failure due to invalid subject.  - auth_failed_invalid_audience: authentication failure due to invalid audience.  - auth_failed_invalid_issuer: authentication failure due to invalid issuer.  - invalid_claims: authentication failure due to invalid claims.  - auth_failed_invalid_bearer_token: authentication failure due to invalid bearer token.  - missing_customer_in_bearer_token: authentication failure with customer id missing in bearer token.  - missing_store_in_bearer_token: authentication failure with store id missing in bearer token.  - store_mismatch_in_bearer_token: authentication failure due to store mismatch from bearer token.  - customer_mismatch_in_bearer_token: authentication failure due to customer id in the request being different from the customer id in the bearer token.  - bearer_token_missing: bearer token missing in request.  - unauthenticated: unauthenticated.  - insufficient_permissions: insufficient permissions.  - unauthorized_principal: authentication denial due to unauthorized principal.
type AuthErrorCode string

// List of AuthErrorCode
const (
	NO_AUTH_ERROR                     AuthErrorCode = "no_auth_error"
	AUTH_FAILURE                      AuthErrorCode = "auth_failure"
	AUTH_FAILED_INVALID_SUBJECT       AuthErrorCode = "auth_failed_invalid_subject"
	AUTH_FAILED_INVALID_AUDIENCE      AuthErrorCode = "auth_failed_invalid_audience"
	AUTH_FAILED_INVALID_ISSUER        AuthErrorCode = "auth_failed_invalid_issuer"
	INVALID_CLAIMS                    AuthErrorCode = "invalid_claims"
	AUTH_FAILED_INVALID_BEARER_TOKEN  AuthErrorCode = "auth_failed_invalid_bearer_token"
	MISSING_CUSTOMER_IN_BEARER_TOKEN  AuthErrorCode = "missing_customer_in_bearer_token"
	MISSING_STORE_IN_BEARER_TOKEN     AuthErrorCode = "missing_store_in_bearer_token"
	STORE_MISMATCH_IN_BEARER_TOKEN    AuthErrorCode = "store_mismatch_in_bearer_token"
	CUSTOMER_MISMATCH_IN_BEARER_TOKEN AuthErrorCode = "customer_mismatch_in_bearer_token"
	BEARER_TOKEN_MISSING              AuthErrorCode = "bearer_token_missing"
	UNAUTHENTICATED                   AuthErrorCode = "unauthenticated"
	INSUFFICIENT_PERMISSIONS          AuthErrorCode = "insufficient_permissions"
	UNAUTHORIZED_PRINCIPAL            AuthErrorCode = "unauthorized_principal"
)

var allowedAuthErrorCodeEnumValues = []AuthErrorCode{
	"no_auth_error",
	"auth_failure",
	"auth_failed_invalid_subject",
	"auth_failed_invalid_audience",
	"auth_failed_invalid_issuer",
	"invalid_claims",
	"auth_failed_invalid_bearer_token",
	"missing_customer_in_bearer_token",
	"missing_store_in_bearer_token",
	"store_mismatch_in_bearer_token",
	"customer_mismatch_in_bearer_token",
	"bearer_token_missing",
	"unauthenticated",
	"insufficient_permissions",
	"unauthorized_principal",
}

func (v *AuthErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthErrorCode(value)
	for _, existing := range allowedAuthErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthErrorCode", value)
}

// NewAuthErrorCodeFromValue returns a pointer to a valid AuthErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthErrorCodeFromValue(v string) (*AuthErrorCode, error) {
	ev := AuthErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthErrorCode: valid values are %v", v, allowedAuthErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthErrorCode) IsValid() bool {
	for _, existing := range allowedAuthErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthErrorCode value
func (v AuthErrorCode) Ptr() *AuthErrorCode {
	return &v
}

type NullableAuthErrorCode struct {
	value *AuthErrorCode
	isSet bool
}

func (v NullableAuthErrorCode) Get() *AuthErrorCode {
	return v.value
}

func (v *NullableAuthErrorCode) Set(val *AuthErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthErrorCode(val *AuthErrorCode) *NullableAuthErrorCode {
	return &NullableAuthErrorCode{value: val, isSet: true}
}

func (v NullableAuthErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
