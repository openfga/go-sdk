/**
 * Go SDK for OpenFGA
 *
 * API version: 0.1
 * Website: https://openfga.dev
 * Documentation: https://openfga.dev/docs
 * Support: https://discord.gg/8naAwJfWN6
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */

package openfga

import (
	"encoding/json"
)

// TypeDefinitions struct for TypeDefinitions
type TypeDefinitions struct {
	TypeDefinitions *[]TypeDefinition `json:"type_definitions,omitempty"`
}

// NewTypeDefinitions instantiates a new TypeDefinitions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypeDefinitions() *TypeDefinitions {
	this := TypeDefinitions{}
	return &this
}

// NewTypeDefinitionsWithDefaults instantiates a new TypeDefinitions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypeDefinitionsWithDefaults() *TypeDefinitions {
	this := TypeDefinitions{}
	return &this
}

// GetTypeDefinitions returns the TypeDefinitions field value if set, zero value otherwise.
func (o *TypeDefinitions) GetTypeDefinitions() []TypeDefinition {
	if o == nil || o.TypeDefinitions == nil {
		var ret []TypeDefinition
		return ret
	}
	return *o.TypeDefinitions
}

// GetTypeDefinitionsOk returns a tuple with the TypeDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeDefinitions) GetTypeDefinitionsOk() (*[]TypeDefinition, bool) {
	if o == nil || o.TypeDefinitions == nil {
		return nil, false
	}
	return o.TypeDefinitions, true
}

// HasTypeDefinitions returns a boolean if a field has been set.
func (o *TypeDefinitions) HasTypeDefinitions() bool {
	if o != nil && o.TypeDefinitions != nil {
		return true
	}

	return false
}

// SetTypeDefinitions gets a reference to the given []TypeDefinition and assigns it to the TypeDefinitions field.
func (o *TypeDefinitions) SetTypeDefinitions(v []TypeDefinition) {
	o.TypeDefinitions = &v
}

func (o TypeDefinitions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TypeDefinitions != nil {
		toSerialize["type_definitions"] = o.TypeDefinitions
	}
	return json.Marshal(toSerialize)
}

type NullableTypeDefinitions struct {
	value *TypeDefinitions
	isSet bool
}

func (v NullableTypeDefinitions) Get() *TypeDefinitions {
	return v.value
}

func (v *NullableTypeDefinitions) Set(val *TypeDefinitions) {
	v.value = val
	v.isSet = true
}

func (v NullableTypeDefinitions) IsSet() bool {
	return v.isSet
}

func (v *NullableTypeDefinitions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypeDefinitions(val *TypeDefinitions) *NullableTypeDefinitions {
	return &NullableTypeDefinitions{value: val, isSet: true}
}

func (v NullableTypeDefinitions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypeDefinitions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
