/**
 * Go SDK for OpenFGA
 *
 * API version: 0.1
 * Website: https://openfga.dev
 * Documentation: https://openfga.dev/docs
 * Support: https://discord.gg/8naAwJfWN6
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */

package openfga

import (
	"encoding/json"
)

// WriteAssertionsRequestParams struct for WriteAssertionsRequestParams
type WriteAssertionsRequestParams struct {
	Assertions []Assertion `json:"assertions"`
}

// NewWriteAssertionsRequestParams instantiates a new WriteAssertionsRequestParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWriteAssertionsRequestParams(assertions []Assertion) *WriteAssertionsRequestParams {
	this := WriteAssertionsRequestParams{}
	this.Assertions = assertions
	return &this
}

// NewWriteAssertionsRequestParamsWithDefaults instantiates a new WriteAssertionsRequestParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWriteAssertionsRequestParamsWithDefaults() *WriteAssertionsRequestParams {
	this := WriteAssertionsRequestParams{}
	return &this
}

// GetAssertions returns the Assertions field value
func (o *WriteAssertionsRequestParams) GetAssertions() []Assertion {
	if o == nil {
		var ret []Assertion
		return ret
	}

	return o.Assertions
}

// GetAssertionsOk returns a tuple with the Assertions field value
// and a boolean to check if the value has been set.
func (o *WriteAssertionsRequestParams) GetAssertionsOk() (*[]Assertion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assertions, true
}

// SetAssertions sets field value
func (o *WriteAssertionsRequestParams) SetAssertions(v []Assertion) {
	o.Assertions = v
}

func (o WriteAssertionsRequestParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["assertions"] = o.Assertions
	}
	return json.Marshal(toSerialize)
}

type NullableWriteAssertionsRequestParams struct {
	value *WriteAssertionsRequestParams
	isSet bool
}

func (v NullableWriteAssertionsRequestParams) Get() *WriteAssertionsRequestParams {
	return v.value
}

func (v *NullableWriteAssertionsRequestParams) Set(val *WriteAssertionsRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableWriteAssertionsRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableWriteAssertionsRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWriteAssertionsRequestParams(val *WriteAssertionsRequestParams) *NullableWriteAssertionsRequestParams {
	return &NullableWriteAssertionsRequestParams{value: val, isSet: true}
}

func (v NullableWriteAssertionsRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWriteAssertionsRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
